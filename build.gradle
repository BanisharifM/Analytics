apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'war'
compileJava.options.encoding = 'UTF-8'

allprojects {

    group = theProjectGroup
    version = theProjectVersion
    sourceCompatibility = theSourceCompatibility

    repositories {
        maven {
            url "${artifactoryContextUrl}/libs-snapshot"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url "${artifactoryContextUrl}/libs-release"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
}

buildscript {
    ext.kotlin_version = '1.2.51'
    repositories {
        maven {
            url "${artifactoryContextUrl}/remote-repos"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
    }
}
configurations {
    all*.exclude group: 'org.hibernate', module:'hibernate-entitymanager'
}
dependencies {
    compile 'commons-validator:commons-validator:1.5.0'

    compile (group:'com.idehgostar',name:'makhsan-auth',version:'1.10-SNAPSHOT'){
        changing = true
        exclude group: 'com.idehgostar',module:'jpam'
        exclude group:'org.springframework', module: 'spring-support'
    }

    compile 'com.h2database:h2:1.4.190'
    compile 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'net.javacrumbs.json-unit:json-unit:1.6.1'
    compile 'com.google.code.gson:gson:2.4'
    compile 'jaxen:jaxen:1.1.6'

    compile 'org.powermock:powermock-mockito-release-full:1.6.3'
    compile 'org.mockito:mockito-all:1.10.19'
    compile(group: 'com.idehgostar', name: 'jpam', version: '1.0') {
        changing = true
        exclude group: 'javax.servlet', module: 'servlet-api'
        exclude group: 'org.hibernate'
        exclude group:'org.springframework', module: 'spring-support'
        exclude group: 'org.springframework'
        exclude group: 'org.hibernate.javax.persistence', module: 'hibernate-jpa-2.0-api'
    }
    compile(group: 'com.idehgostar', name: 'confix', version: '1.0') {
        changing = true
    }
//    compile(group: 'com.idehgostar', name: 'jereme', version: '1.0'){
//        exclude group: 'javax.servlet', module: 'servlet-api'
//        exclude group: 'org.hibernate.javax.persistence', module: 'hibernate-jpa-2.0-api'
//    }
//    compile(group: 'com.idehgostar', name: 'jwebcore', version: '1.2-SNAPSHOT') {
//        exclude group: 'javax.servlet', module: 'servlet-apbi'
//        exclude group: 'org.hibernate.javax.persistence', module: 'hibernate-jpa-2.0-api'
//    }
    compile(group: 'org.apache.solr', name: 'solr-solrj', version: '5.3.0')
    compile(group: 'org.apache.solr', name: 'solr-core', version: '5.3.0')
//    compile(group: 'com.idehgostar.libs', name: 'arabic-root-finder', version: '1.1.41-SNAPSHOT')

    def JerseyVersion = '2.25'
    compile 'org.glassfish.jersey.core:jersey-server:' + JerseyVersion
    compile 'org.glassfish.jersey.core:jersey-client:' + JerseyVersion
    compile 'org.glassfish.jersey.core:jersey-common:' + JerseyVersion
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:' + JerseyVersion
    compile 'org.glassfish.jersey.media:jersey-media-multipart:' + JerseyVersion
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:' + JerseyVersion
    compile 'org.glassfish.jersey.ext:jersey-bean-validation:' + JerseyVersion;
    compile('org.glassfish.jersey.ext:jersey-spring3:' + JerseyVersion) {
        exclude group: 'org.glassfish.hk2.external', module: 'bean-validator'
    };

    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.2'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.2'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.2'

    def spring_version = '4.3.3.RELEASE'
    def spring_sec_version = '4.2.0.RELEASE'
    compile 'org.springframework:spring-context:' + spring_version
    compile 'org.springframework:spring-orm:' + spring_version
    compile 'org.springframework:spring-aspects:' + spring_version
    compile 'org.springframework.security:spring-security-web:' + spring_sec_version
    compile 'org.springframework.security:spring-security-config:' + spring_sec_version
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.0.7.RELEASE'

//    compile 'org.hibernate:hibernate-entitymanager:4.3.11.Final'
    compile 'org.hibernate:hibernate-core:5.2.4.Final'

//    compile 'mysql:mysql-connector-java:5.1.36'
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
    compile group: 'org.flywaydb', name: 'flyway-core', version: '4.0.3'

    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-collections4:4.0'
    compile 'org.apache.commons:commons-dbcp2:2.1.1'

    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-log4j12:1.7.12'
    compile files('libs/Kavenegar.Java-SDK.jar')


    compile 'org.activiti:activiti-engine:5.20.0' //todo: why it doesn't work without??

    runtime group: 'org.apache.tomcat', name: 'tomcat-catalina', version: '8.0.33'


    testCompile 'junit:junit:4.12'
    testCompile('com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly:1.19') {
        exclude group: 'javax.servlet', module: 'servlet-api'
    }
    testCompile('com.sun.jersey.jersey-test-framework:jersey-test-framework-core:1.19') {
        exclude group: 'javax.servlet', module: 'servlet-api'
    }
    testCompile('com.sun.grizzly:grizzly-http-servlet-deployer:1.9.64') {
        exclude group: 'javax.servlet', module: 'servlet-api'
    }
    testCompile 'org.springframework:spring-test:' + spring_version
    def retrofitVersion = '2.1.0'
    compile group: 'com.squareup.retrofit2', name: 'retrofit', version: retrofitVersion
    compile group: 'com.squareup.retrofit2', name: 'converter-jackson', version: retrofitVersion
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

}

task testsJar(type: Jar, dependsOn: 'compileTestJava') {
    def testSrc = sourceSets.test.output.classesDirs
    from "${testSrc}/"
    archiveName= 'tests.jar'
}

//task apiJar(type: Jar, dependsOn: 'compileJava') {
//    def mainSrc = sourceSets.main.output.classesDir
//    def mainResource = sourceSets.main.output.resourcesDir
//    from "${mainSrc}/"
//    from "${mainResource}/"
//    archiveName= "${rootProject.name}-api-${version}.jar"
//}

artifacts {
    archives(testsJar.archivePath) {
        name 'tests'
        type 'jar'
        builtBy testsJar
    }

//    archives(apiJar.archivePath) {
//        type 'jar'
//        builtBy apiJar
//    }
}

test {
    jvmArgs '-noverify'
    forkEvery 1

    afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

/*
task dbFillJar(type: Jar, dependsOn: 'compileTestJava') {
    def testSrc = sourceSets.test.output.classesDir
    from "${testSrc}/dbfill/"
    archiveName= 'dbfiller.jar'
}

artifacts {
    archives(dbFillJar.archivePath) {
        name 'dbfiller'
        type 'jar'
        builtBy dbFillJar
    }
}
*/


task sampleTest(type: Test, dependsOn: testClasses) {
    include '**/*Search*/'
}

apply plugin: "kotlin-spring"
apply plugin: "kotlin-jpa"
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"

artifactory {
    contextUrl = "${artifactoryContextUrl}"
    publish {
        repository {
            repoKey = 'libs-snapshot-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
//            maven = true

        }
        defaults {
            publications('webApp')
            publications('mavenJava')
//            publications('auth.mavenJava')
        }
    }
}


publishing {
    publications {
        webApp(MavenPublication) {
            from components.web
        }
        mavenJava(MavenPublication) {
            artifactId "${theProjectName}-api"
            from components.java
        }
    }
}


compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
